import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import random
from create_db2 import *
from example_request import get_example

TOKEN = ''
state_storage = StateMemoryStorage()
bot = telebot.TeleBot(TOKEN, state_storage=state_storage)

buttons = []


class Commands:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ‚è≠'
    EXAMPLE = '–ü—Ä–∏–º–µ—Ä üá¨üáß'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_word = State()


@bot.message_handler(commands=['cards', 'start'])
def start_bot(message):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ë–î
    """
    if not check_user(message.chat.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î Postgres
        add_user_to_db(message.chat.id)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É USERS –ë–î Postgres
        for word, translation in words.items():  # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            add_word(word, translation, message.chat.id)
        msg = '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.' \
              '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ' \
              '–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ' \
              ' –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï –∏–ª–∏ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô. –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è?'
        bot.send_message(message.chat.id, msg)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    markup = types.ReplyKeyboardMarkup(row_width=2)

    words_dct = get_words(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î
    russian_word = words_dct[0]['translation']  # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, –∏ 3 - –¥–ª—è —Ñ–æ–Ω–∞
    target_word = words_dct[0]['word']
    other_words = []
    for wrd in [1, 2, 3]:
        other_words.append(words_dct[wrd]['word'])

    target_word_btn = types.KeyboardButton(target_word)
    other_words_buttons = [types.KeyboardButton(word) for word in other_words]
    buttons = [target_word_btn] + other_words_buttons
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Commands.NEXT)
    add_word_btn = types.KeyboardButton(Commands.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Commands.DELETE_WORD)
    example_btn = types.KeyboardButton(Commands.EXAMPLE)
    buttons.extend([next_btn, add_word_btn, example_btn, delete_word_btn])

    markup.add(*buttons)

    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\n üá∑üá∫{russian_word}', reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = russian_word
        data['other_words'] = other_words


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        russian_word = data['translate_word']

    if message.text == target_word:
        bot.send_message(message.chat.id, f'–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æüëå \n {target_word} -> {russian_word}')
        start_bot(message)

    elif message.text == Commands.ADD_WORD:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æüá¨üáß:')
        bot.register_next_step_handler(message, new_word)

    elif message.text == Commands.NEXT:
        bot.send_message(message.chat.id, '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ')
        start_bot(message)

    elif message.text == Commands.EXAMPLE:
        bot.send_message(message.chat.id, get_example(target_word))

    elif message.text == Commands.DELETE_WORD:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—åüá∑üá∫:')
        bot.register_next_step_handler(message, delete_word)

    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


def new_word(message):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∞–Ω–≥–ª. —Å–ª–æ–≤–æ
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['added_word'] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥üá∑üá∫:')
    bot.register_next_step_handler(message, new_translation)


def new_translation(message):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä—É —Å–ª–æ–≤–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['added_translation'] = message.text
    bot.send_message(message.chat.id, data['added_word'])
    bot.send_message(message.chat.id, data['added_translation'])
    add_word(data['added_word'], data['added_translation'], message.chat.id)
    words_cnt = get_words_count(message.chat.id)
    bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤: {words_cnt}')
    start_bot(message)  # –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—é —Å–ª–æ–≤


def delete_word(message):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∏–∑—É—á–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 4-—Ö, –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–Ω–æ–ø–æ–∫)
    """
    words_cnt = get_words_count(message.chat.id)
    if words_cnt > 4:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['deleted_word'] = message.text
        del_word(data['deleted_word'], message.chat.id)
    words_cnt = get_words_count(message.chat.id)
    bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤: {words_cnt}')
    start_bot(message)  # –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—é —Å–ª–æ–≤


if __name__ == '__main__':
    print('Bot is running')
    bot.infinity_polling(skip_pending=True)
